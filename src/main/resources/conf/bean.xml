<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
         
	<context:component-scan base-package="com.qt"></context:component-scan>

	<!-- 监控,5分钟 -->
	<bean id="monitor5CronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="monitor5Job"></property>
		<property name="cronExpression" value="0 */5 * * * ?"></property>
	</bean>
	
	<!-- 监控,10分钟 -->
	<bean id="monitor10CronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="monitor10Job"></property>
		<property name="cronExpression" value="0 */10 * * * ?"></property>
	</bean>
	
	<!-- 监控,30分钟 -->
	<bean id="monitor30CronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="monitor30Job"></property>
		<property name="cronExpression" value="0 3,33 * * * ?"></property>
	</bean>
	
	<!-- send daily check log -->
	<bean id="sendCheckDataCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="sendCheckDataJob"></property>
		<property name="cronExpression" value="0 20 8,18 * * ?"></property>
	</bean>

	<bean id="monitor5Job"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false" />
		<property name="targetObject" ref="monitorService" />
		<property name="targetMethod" value="monitor5"></property>
	</bean>
	
	<bean id="monitor10Job"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false" />
		<property name="targetObject" ref="monitorService" />
		<property name="targetMethod" value="monitor10"></property>
	</bean>
	
	<bean id="monitor30Job"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false" />
		<property name="targetObject" ref="monitorService" />
		<property name="targetMethod" value="monitor30"></property>
	</bean>

	<bean id="sendCheckDataJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false" />
		<property name="targetObject" ref="checkService" />
		<property name="targetMethod" value="sendCheckContent">
		</property>
	</bean>

	<bean id="monitorSchedulerFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="monitor5CronTrigger" />
				<ref local="monitor10CronTrigger" />
				<ref local="monitor30CronTrigger" />
				<ref local="sendCheckDataCronTrigger" />
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>

	<bean id="propertyConfigurer"
                class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                <property name="locations">
                        <list>
                                <value>classpath:conf/resources.properties</value>
                        </list>
                </property>
        </bean>

	<!--  bean id="propertyConfigurer"
		class="com.qt.core.config.RemotePropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
			</list>
		</property>
		<property name="appName" value="xxtMonitor"/>
	</bean-->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />

    </bean>

</beans>