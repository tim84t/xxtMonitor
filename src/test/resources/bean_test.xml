<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:component-scan base-package="com.qt"></context:component-scan>

	<!--  bean id="monitorSchedulerFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="monitorCronTrigger" />
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean-->

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
  		<property name="driverClass">
  			<value>${xxt.jdbc.driverClassName}</value>
  		</property>
  		<property name="jdbcUrl">
  			<value>${xxt.jdbc.url}</value>
  		</property>
  		<property name="user">
  			<value>${xxt.jdbc.username}</value>
  		</property>
  		<property name="password">
  			<value>${xxt.jdbc.password}</value>
  		</property>
  		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
  		<property name="initialPoolSize">
  			<value>${c3p0.initialPoolSize}</value>
  		</property>
  		<!--连接池中保留的最小连接数。-->
  		<property name="minPoolSize">
  			<value>${c3p0.minPoolSize}</value>
  		</property>
  		<!--连接池中保留的最大连接数。Default: 15 -->
  		<property name="maxPoolSize">
  			<value>${c3p0.maxPoolSize}</value>
  		</property>
  		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
  		<property name="maxIdleTime">   
            <value>${c3p0.maxIdleTime}</value>   
        </property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement">   
            <value>${c3p0.acquireIncrement}</value>   
        </property>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
  		属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
  		如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements">   
            <value>${c3p0.maxStatements}</value>   
        </property>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod">   
            <value>${c3p0.idleConnectionTestPeriod}</value>
        </property>
        <!--两次连接中间隔时间，单位毫秒，默认为1000 -->
        <property name="acquireRetryDelay">
        	<value>${c3p0.acquireRetryDelay}</value>
        </property>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->   
        <property name="acquireRetryAttempts">
            <value>${c3p0.acquireRetryAttempts}</value>
        </property>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效   
  		保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试   
  		获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->   
        <property name="breakAfterAcquireFailure">
            <value>${c3p0.breakAfterAcquireFailure}</value>
        </property>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的   
  		时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable   
  		等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout">
            <value>${c3p0.testConnectionOnCheckout}</value>
        </property>
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
                      通过多线程实现多个操作同时被执行。Default: 3--> 
        <property name="numHelperThreads">
        	<value>${c3p0.numHelperThreads}</value>
        </property>
 	</bean>

</beans>